#pragma once
#include <concepts>
#include <iterator>
#include <limits>
#include <memory>
#include <ranges>
#include <stdexcept>
#include <type_traits>
#include <iterator>
#include <string>
#include <format>

//? compat
#include <string_view>

#include <rsl/_impl/wrap_iter.hpp>

#include <rsl/_impl/meta.hpp>
#include <meta>

namespace rsl {
template <typename CharT, typename Traits = std::char_traits<CharT>>
class basic_string_view {
public:
  // types
  using traits_type               = Traits;
  using value_type                = CharT;
  using pointer                   = value_type*;
  using const_pointer             = value_type const*;
  using reference                 = value_type&;
  using const_reference           = value_type const&;
  using const_iterator            = const_pointer;
  using iterator                  = const_iterator;
  using const_reverse_iterator    = std::reverse_iterator<const_iterator>;
  using reverse_iterator          = const_reverse_iterator;
  using size_type                 = size_t;
  using difference_type           = ptrdiff_t;
  static constexpr size_type npos = size_type(-1);

  static_assert(!std::is_array_v<value_type>,
                "Character type of basic_string_view must not be an array");
  static_assert(std::is_standard_layout_v<value_type>,
                "Character type of basic_string_view must be standard-layout");
  static_assert(std::is_trivially_copyable_v<CharT> && std::is_trivially_default_constructible_v<CharT>,
                "Character type of basic_string_view must be trivial");
  static_assert(std::same_as<CharT, typename traits_type::char_type>,
                "traits_type::char_type must be the same type as CharT");

  // [string.view.cons], construction and assignment
  constexpr basic_string_view() noexcept : _impl_data(nullptr), _impl_size(0) {}
  constexpr basic_string_view(basic_string_view const&) noexcept            = default;
  constexpr basic_string_view& operator=(basic_string_view const&) noexcept = default;
  basic_string_view(nullptr_t)                                              = delete;

  constexpr explicit(false) basic_string_view(const CharT* str)
      : _impl_data(str)
      , _impl_size(std::char_traits<CharT>::length(str)) {}
  constexpr basic_string_view(CharT const* str, size_type len) : _impl_data(str), _impl_size(len) {}

  template <std::contiguous_iterator It, std::sized_sentinel_for<It> End>
    requires(std::same_as<std::iter_value_t<It>, CharT> && !std::is_convertible_v<End, size_type>)
  constexpr basic_string_view(It begin, End end)
      : _impl_data(std::to_address(begin))
      , _impl_size(end - begin) {}

  template <typename R>
    requires(!std::same_as<std::remove_cvref_t<R>, basic_string_view> &&
             std::ranges::sized_range<R> && std::ranges::contiguous_range<R> &&
             std::same_as<std::ranges::range_value_t<R>, CharT> &&
             !std::is_convertible_v<R, CharT const*> && (!requires(std::remove_cvref_t<R>& range) {
               range.operator rsl::basic_string_view<CharT, Traits>;
             }))
  constexpr explicit basic_string_view(R&& r)
      : _impl_data(std::ranges::data(r))
      , _impl_size(std::ranges::size(r)) {}

  //? compat
  constexpr explicit(false) basic_string_view(std::basic_string_view<CharT, Traits> const& other)
      : _impl_data(other.data())
      , _impl_size(other.size()) {}

  //? compat
  constexpr explicit(false) operator std::basic_string_view<CharT, Traits>() const {
    return {_impl_data, _impl_size};
  }

  // [string.view.iterators], iterator support
  [[nodiscard]] constexpr const_iterator begin() const noexcept { return _impl_data; }
  [[nodiscard]] constexpr const_iterator end() const noexcept { return &_impl_data[_impl_size]; }
  [[nodiscard]] constexpr const_iterator cbegin() const noexcept { return begin(); }
  [[nodiscard]] constexpr const_iterator cend() const noexcept { return end(); }
  [[nodiscard]] constexpr const_reverse_iterator rbegin() const noexcept { return {cend()}; }
  [[nodiscard]] constexpr const_reverse_iterator rend() const noexcept { return {cbegin()}; }
  [[nodiscard]] constexpr const_reverse_iterator crbegin() const noexcept { return rbegin(); }
  [[nodiscard]] constexpr const_reverse_iterator crend() const noexcept { return rend(); }

  // [string.view.capacity], capacity
  [[nodiscard]] constexpr size_type size() const noexcept { return _impl_size; }
  [[nodiscard]] constexpr size_type length() const noexcept { return _impl_size; }
  [[nodiscard]] constexpr size_type max_size() const noexcept {
    return std::numeric_limits<size_type>::max() / sizeof(value_type);
  }
  [[nodiscard]] constexpr bool empty() const noexcept { return _impl_size == 0; }

  // [string.view.access], element access
  [[nodiscard]] constexpr const_reference operator[](size_type pos) const {
    return _impl_data[pos];
  }
  [[nodiscard]] constexpr const_reference at(size_type pos) const {
    if (pos >= size()) {
      throw std::out_of_range("basic_string_view::at");
    }
    return _impl_data[pos];
  }
  [[nodiscard]] constexpr const_reference front() const { return _impl_data[0]; }
  [[nodiscard]] constexpr const_reference back() const { return _impl_data[_impl_size]; }
  [[nodiscard]] constexpr const_pointer data() const noexcept { return _impl_data; }

  // [string.view.modifiers], modifiers
  constexpr void remove_prefix(size_type n) {
    _impl_data += n;
    _impl_size -= n;
  }
  constexpr void remove_suffix(size_type n) { _impl_size -= n; }
  constexpr void swap(basic_string_view& s) noexcept {
    swap(s._impl_data, _impl_data);
    swap(s._impl_size, _impl_size);
  }

  // [string.view.ops], string operations
  constexpr size_type copy(CharT* s, size_type n, size_type pos = 0) const {
    if (pos > size()) {
      throw std::out_of_range("basic_string_view::copy");
    }
    size_type min_len = std::min(n, size() - pos);
    Traits::copy(s, data() + pos, min_len);
    return min_len;
  }

  [[nodiscard]] constexpr basic_string_view substr(size_type pos = 0, size_type n = npos) const {
    if (pos > size()) {
      throw std::out_of_range("basic_string_view::substr");
    }

    return basic_string_view(data() + pos, std::min(n, size() - pos));
  }

  [[nodiscard]] constexpr int compare(basic_string_view other) const noexcept {
    size_type min_len = std::min(size(), other.size());
    int ret           = Traits::compare(data(), other.data(), min_len);
    if (ret == 0) {
      // first `min_len` chars matched
      return size() == other.size() ? 0 : (size() < other.size() ? -1 : 1);
    }
    return ret;
  }

  [[nodiscard]] constexpr int compare(size_type pos1, size_type n1, basic_string_view s) const {
    return substr(pos1, n1).compare(s);
  }

  [[nodiscard]] constexpr int compare(size_type pos1,
                                      size_type n1,
                                      basic_string_view s,
                                      size_type pos2,
                                      size_type n2) const {
    return substr(pos1, n1).compare(s.substr(pos2, n2));
  }

  [[nodiscard]] constexpr int compare(const CharT* s) const {
    return compare(basic_string_view(s));
  }

  [[nodiscard]] constexpr int compare(size_type pos1, size_type n1, const CharT* s) const {
    return substr(pos1, n1).compare(basic_string_view(s));
  }
  [[nodiscard]] constexpr int compare(size_type pos1,
                                      size_type n1,
                                      const CharT* s,
                                      size_type n2) const {
    return substr(pos1, n1).compare(basic_string_view(s, n2));
  }

  [[nodiscard]] constexpr bool starts_with(basic_string_view other) const noexcept {
    if (size() < other.size()) {
      return false;
    }
    return compare(0, other.size(), other) == 0;
  }

  [[nodiscard]] constexpr bool starts_with(CharT other) const noexcept {
    return !empty() && Traits::eq(front(), other);
  }

  [[nodiscard]] constexpr bool starts_with(CharT const* other) const {
    return starts_with(basic_string_view(other));
  }

  [[nodiscard]] constexpr bool ends_with(basic_string_view other) const noexcept {
    if (size() < other.size()) {
      return false;
    }
    return compare(size() - other.size(), npos, other) == 0;
  }
  [[nodiscard]] constexpr bool ends_with(CharT other) const noexcept {
    return !empty() && Traits::eq(back(), other);
  }
  [[nodiscard]] constexpr bool ends_with(CharT const* other) const {
    return end_swith(basic_string_view(other));
  }

  [[nodiscard]] constexpr bool contains(basic_string_view other) const noexcept {
    return find(other) != npos;
  }
  [[nodiscard]] constexpr bool contains(CharT other) const noexcept { return find(other) != npos; }
  [[nodiscard]] constexpr bool contains(CharT const* other) const { return find(other) != npos; }

  // [string.view.find], searching
  [[nodiscard]] constexpr size_type find(basic_string_view s, size_type pos = 0) const noexcept;
  [[nodiscard]] constexpr size_type find(CharT c, size_type pos = 0) const noexcept;
  [[nodiscard]] constexpr size_type find(CharT const* s, size_type pos, size_type n) const;
  [[nodiscard]] constexpr size_type find(CharT const* s, size_type pos = 0) const;
  [[nodiscard]] constexpr size_type rfind(basic_string_view s, size_type pos = npos) const noexcept;
  [[nodiscard]] constexpr size_type rfind(CharT c, size_type pos = npos) const noexcept;
  [[nodiscard]] constexpr size_type rfind(CharT const* s, size_type pos, size_type n) const;
  [[nodiscard]] constexpr size_type rfind(CharT const* s, size_type pos = npos) const;

  [[nodiscard]] constexpr size_type find_first_of(basic_string_view s,
                                                  size_type pos = 0) const noexcept;
  [[nodiscard]] constexpr size_type find_first_of(CharT c, size_type pos = 0) const noexcept;
  [[nodiscard]] constexpr size_type find_first_of(CharT const* s, size_type pos, size_type n) const;
  [[nodiscard]] constexpr size_type find_first_of(CharT const* s, size_type pos = 0) const;
  [[nodiscard]] constexpr size_type find_last_of(basic_string_view s,
                                                 size_type pos = npos) const noexcept;
  [[nodiscard]] constexpr size_type find_last_of(CharT c, size_type pos = npos) const noexcept;
  [[nodiscard]] constexpr size_type find_last_of(CharT const* s, size_type pos, size_type n) const;
  [[nodiscard]] constexpr size_type find_last_of(CharT const* s, size_type pos = npos) const;
  [[nodiscard]] constexpr size_type find_first_not_of(basic_string_view s,
                                                      size_type pos = 0) const noexcept;
  [[nodiscard]] constexpr size_type find_first_not_of(CharT c, size_type pos = 0) const noexcept;
  [[nodiscard]] constexpr size_type find_first_not_of(CharT const* s,
                                                      size_type pos,
                                                      size_type n) const;
  [[nodiscard]] constexpr size_type find_first_not_of(CharT const* s, size_type pos = 0) const;
  [[nodiscard]] constexpr size_type find_last_not_of(basic_string_view s,
                                                     size_type pos = npos) const noexcept;
  [[nodiscard]] constexpr size_type find_last_not_of(CharT c, size_type pos = npos) const noexcept;
  [[nodiscard]] constexpr size_type find_last_not_of(CharT const* s,
                                                     size_type pos,
                                                     size_type n) const;
  [[nodiscard]] constexpr size_type find_last_not_of(CharT const* s, size_type pos = npos) const;

  const_pointer _impl_data;
  size_type _impl_size;
};

// [string.view.deduct], deduction guides
template <std::contiguous_iterator It, std::sized_sentinel_for<It> End>
basic_string_view(It, End) -> basic_string_view<std::iter_value_t<It>>;

template <std::ranges::contiguous_range R>
basic_string_view(R&&) -> basic_string_view<std::ranges::range_value_t<R>>;

// [string.view.comparison], non-member comparison functions
template <typename CharT, typename Traits>
constexpr bool operator==(basic_string_view<CharT, Traits> lhs,
                          std::type_identity_t<basic_string_view<CharT, Traits>> rhs) noexcept {
  if (lhs.size() != rhs.size()) {
    return false;
  }
  return lhs.compare(rhs) == 0;
}

//? compat
template <typename CharT, typename Traits>
constexpr bool operator==(basic_string_view<CharT, Traits> lhs,
                          std::type_identity_t<std::basic_string_view<CharT, Traits>> rhs) noexcept {
  if (lhs.size() != rhs.size()) {
    return false;
  }
  return lhs.compare(rhs) == 0;
}

template <typename CharT, typename Traits>
constexpr auto operator<=>(basic_string_view<CharT, Traits> lhs,
                           std::type_identity_t<basic_string_view<CharT, Traits>> rhs) noexcept {
  if constexpr (requires { typename Traits::comparison_category; }) {
    return static_cast<typename Traits::comparison_category>(lhs.compare(rhs) <=> 0);
  } else {
    return static_cast<std::weak_ordering>(lhs.compare(rhs) <=> 0);
  }
}

//? compat
template <typename CharT, typename Traits>
constexpr auto operator<=>(basic_string_view<CharT, Traits> lhs,
                           std::type_identity_t<std::basic_string_view<CharT, Traits>> rhs) noexcept {
  if constexpr (requires { typename Traits::comparison_category; }) {
    return static_cast<typename Traits::comparison_category>(lhs.compare(rhs) <=> 0);
  } else {
    return static_cast<std::weak_ordering>(lhs.compare(rhs) <=> 0);
  }
}


// basic_string_view typedef-names
using string_view    = basic_string_view<char>;
using u8string_view  = basic_string_view<char8_t>;
using u16string_view = basic_string_view<char16_t>;
using u32string_view = basic_string_view<char32_t>;
using wstring_view   = basic_string_view<wchar_t>;

inline namespace literals {
inline namespace string_view_literals {
// [string.view.literals], suffix for basic_string_view literals
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wuser-defined-literals"
constexpr string_view operator""sv(const char* str, size_t len) noexcept {
  return {str, len};
}
constexpr u8string_view operator""sv(const char8_t* str, size_t len) noexcept {
  return {str, len};
}
constexpr u16string_view operator""sv(const char16_t* str, size_t len) noexcept {
  return {str, len};
}
constexpr u32string_view operator""sv(const char32_t* str, size_t len) noexcept {
  return {str, len};
}
constexpr wstring_view operator""sv(const wchar_t* str, size_t len) noexcept {
  return {str, len};
}
#pragma clang diagnostic pop
}  // namespace string_view_literals
}  // namespace literals
}  // namespace rsl

// [string.view.hash], hash support
template <>
struct std::hash<rsl::string_view>;
template <>
struct std::hash<rsl::u8string_view>;
template <>
struct std::hash<rsl::u16string_view>;
template <>
struct std::hash<rsl::u32string_view>;
template <>
struct std::hash<rsl::wstring_view>;

template <class charT, class traits>
constexpr bool std::ranges::enable_view<rsl::basic_string_view<charT, traits>> = true;
template <class charT, class traits>
constexpr bool std::ranges::enable_borrowed_range<rsl::basic_string_view<charT, traits>> = true;

// [string.view.io], inserters and extractors
template <class CharT, class Traits>
std::basic_ostream<CharT, Traits>& operator<<(std::basic_ostream<CharT, Traits>& os,
                                              rsl::basic_string_view<CharT, Traits> str) {
  // TODO
  os << std::string_view(str);
}

// TODO
template <typename CharT, typename Traits>
struct std::formatter<rsl::basic_string_view<CharT, Traits>, CharT>
    : std::formatter<std::basic_string_view<CharT>, CharT> {
  using base = std::formatter<std::basic_string_view<CharT>, CharT>;
  // constexpr auto parse(std::format_parse_context& ctx) { }

  constexpr auto format(rsl::basic_string_view<CharT, Traits> const& obj,
                        std::format_context& ctx) const {
    // return std::format_to(ctx.out(), std::string_view(obj._impl_data, obj._impl_size));
    return base::format(std::string_view(obj), ctx);
  }
};
