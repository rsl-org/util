#pragma once
#include <iterator>
#include <meta>
#include <ranges>
#include <source_location>
#include <string>
#include <string_view>
#include <cstdlib>
#include <cstdio>

#include <rsl/source_location>
#include <rsl/expect>
#include <rsl/string_view>
#include <rsl/util/to_string.hpp>
#include "_impl/macros.hpp"

#define RSL_REVIEW_DEFAULT 1

#if !defined(RSL_ENABLE_REVIEW)
#  define RSL_IMPL_ENABLE_REVIEW 0
#else
#  if RSL_IMPL_IS_EMPTY(RSL_ENABLE_REVIEW)
#    define RSL_IMPL_ENABLE_REVIEW 1
#  else
#    define RSL_IMPL_ENABLE_REVIEW RSL_ENABLE_REVIEW
#  endif
#endif

namespace rsl {
namespace _error_impl {
template <char const* message>
consteval void error() {
  static_assert(false, std::string_view{message});
}

constexpr std::string format_sloc(std::source_location sloc) {
  return std::string(sloc.file_name()) + ":" + util::to_string(sloc.line()) + ":" +
         util::to_string(sloc.column());
}
}  // namespace _error_impl

consteval void compile_error(std::string_view message,
                             std::source_location sloc = std::source_location::current()) {
  auto diagnostic = '\n' + _error_impl::format_sloc(sloc) + ": error: " + message;
  extract<void (*)()>(
      substitute(^^_error_impl::error, {std::meta::reflect_constant_string(diagnostic)}))();
}

namespace _assert_impl {
constexpr std::size_t suffix_size(std::string_view str) {
  int parens_count = 0;
  for (auto it = str.rbegin(); it != str.rend(); ++it) {
    if (auto c = *it; c == ')' || c == ']' || c == '}') {
      parens_count++;
    } else if (c == '(' || c == '[' || c == '{') {
      parens_count--;
    } else if (c == ',' && parens_count == 0) {
      return std::distance(str.rbegin(), it) + 1;
    }
  }
  return 0;
}

constexpr void assert_violation(std::source_location sloc,
                                std::string_view assertion,
                                auto value,
                                std::string_view msg = "") {
  auto condition = expect(value);
  assertion.remove_suffix(suffix_size(assertion));
  auto message = std::string("assertion ") + assertion + " failed";

  if (!msg.empty()) {
    message += ": ";
    message += msg;
  }

  auto header = _error_impl::format_sloc(sloc) + ": error: ";
  if consteval {
    auto msg = message + '\n';
    msg += header + "expression evaluated to: " + condition.to_string("") + " => false";
    rsl::compile_error(msg, sloc);
  } else {
    auto diagnostic = header + message + '\n';
    fputs(diagnostic.c_str(), stderr);

    auto evaluated = header + "expression evaluated to: " + condition.to_string("") + " => false\n";
    fputs(evaluated.c_str(), stderr);
    std::abort();
  }
}

#if RSL_IMPL_ENABLE_REVIEW

inline std::vector<std::string>& observations() {
  static std::vector<std::string> value;
  return value;
}

template <unsigned Count>
struct ObservedFailure {
  friend auto get_message(ObservedFailure);
};

template <auto Tag = [] {}, unsigned Idx = 0>
consteval unsigned count_observed() {
  if constexpr (requires(ObservedFailure<Idx> r) { get_message(r); }) {
    return count_observed<Tag, Idx + 1>();
  } else {
    return Idx;
  }
}

template <char const* str, auto Tag = [] {}>
struct Observe {
  friend auto get_message(ObservedFailure<count_observed<Tag>()>) { return std::string_view(str); }
};

template <auto Tag>
bool collect_review() {
  template for (constexpr auto Idx : std::views::iota(0U, count_observed<Tag>())) {
    observations().emplace_back(get_message(ObservedFailure<Idx>()));
  }
  return true;
}

constexpr void review_violation(source_location sloc, std::string_view assertion) {
  if consteval {
    (void)is_complete_type(
        substitute(^^Observe,
                   {// std::meta::reflect_constant(sloc),
                    std::meta::reflect_constant(define_static_string(assertion))}));
  } else {
    observations().emplace_back(assertion);
  }
}
#endif

constexpr bool assert_condition_wrapper(bool result, std::string_view message = {}) {
  return result;
}
}  // namespace _assert_impl
}  // namespace rsl

// in the following macros the assertion itself is wrapped in a IILE
// this needs to be done to support escalating expressions involving objects of consteval-only type

#define constexpr_assert(...)                                                                \
  do {                                                                                       \
    static constexpr std::source_location _sloc = std::source_location::current();           \
    [&] {                                                                                    \
      if (!::rsl::_assert_impl::assert_condition_wrapper(__VA_ARGS__)) {                     \
        ::rsl::_assert_impl::assert_violation(_sloc,                                         \
                                              #__VA_ARGS__,                                  \
                                              ::rsl::_expect_impl::decompose->*__VA_ARGS__); \
      };                                                                                     \
    }();                                                                                     \
  } while (false)

#if RSL_IMPL_ENABLE_REVIEW
#  define constexpr_review(...)                                           \
    do {                                                                  \
      static constexpr auto _sloc = ::rsl::source_location();             \
      [&] {                                                               \
        if (::rsl::_assert_impl::assert_condition_wrapper(__VA_ARGS__)) { \
          ::rsl::_assert_impl::review_violation(_sloc, #__VA_ARGS__);     \
        };                                                                \
      }();                                                                \
    } while (false)

namespace {
static bool const _rsl_review_collected = ::rsl::_assert_impl::collect_review<[] {}>();
}
#else
// even with reviews disabled, ensure they are syntactically valid
#  define constexpr_review(...) sizeof((__VA_ARGS__) ? true : false)
#endif