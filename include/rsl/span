#pragma once

//? compat
#include <span>

#include <concepts>
#include <cstddef>
#include <limits>
#include <memory>
#include <stdexcept>
#include <type_traits>
#include <iterator>

#include <meta>

#include <rsl/_impl/wrap_iter.hpp>
#include <rsl/_impl/meta.hpp>
#include <rsl/_config.hpp>

namespace rsl {
inline constexpr std::size_t dynamic_extent = std::numeric_limits<std::size_t>::max();

template <typename ElementType, std::size_t Extent = dynamic_extent>
class span;

namespace _span_impl {
template <typename T>
concept is_rsl_span = has_template_arguments(^^T) && template_of(^^T) == ^^span;

template <typename Range, typename ElementType>
concept span_compatible_range =
    !is_rsl_span<std::remove_cvref_t<Range>> && std::ranges::contiguous_range<Range> &&
    std::ranges::sized_range<Range> &&
    (std::ranges::borrowed_range<Range> || std::is_const_v<ElementType>) &&
    !std::is_array_v<std::remove_cvref_t<Range>> &&
    std::is_convertible_v<std::remove_reference_t<std::ranges::range_reference_t<Range>> (*)[],
                          ElementType (*)[]>;

template <class From, class To>
concept span_array_convertible = std::is_convertible_v<From (*)[], To (*)[]>;

template <class It, class Tp>
concept span_compatible_iterator =
    std::contiguous_iterator<It> &&
    span_array_convertible<std::remove_reference_t<std::iter_reference_t<It>>, Tp>;

template <class Sentinel, class It>
concept span_compatible_sentinel_for =
    std::sized_sentinel_for<Sentinel, It> && !std::is_convertible_v<Sentinel, std::size_t>;

class span_common {
public:
  // [span.sub], subviews
  template <typename T, std::size_t Count>
  constexpr span<typename std::remove_cvref_t<T>::element_type, Count> first(this T&& self) {
    return {std::forward<T>(self).data(), Count};
  }

  template <typename T, std::size_t Count>
  constexpr span<typename std::remove_cvref_t<T>::element_type, Count> last(this T&& self) {
    return {self.data() + self.size() - Count, Count};
  }

  template <typename T>
  constexpr span<typename std::remove_cvref_t<T>::element_type, dynamic_extent> first(
      this T&& self,
      typename std::remove_cvref_t<T>::size_type count) {
    return {std::forward<T>(self).data(), count};
  }

  template <typename T>
  constexpr span<typename std::remove_cvref_t<T>::element_type, dynamic_extent> last(
      this T&& self,
      typename std::remove_cvref_t<T>::size_type count) {
    return {self.data() + self.size() - count, count};
  }

  template <typename T>
  constexpr span<typename std::remove_cvref_t<T>::element_type, dynamic_extent> subspan(
      this T&& self,
      typename std::remove_cvref_t<T>::size_type offset,
      typename std::remove_cvref_t<T>::size_type count = dynamic_extent) {
        if (count == dynamic_extent) {
          return {self.data() + offset, self.size() - offset};
        }
        return {self.data() + offset, count};
      }

  // [span.obs], observers
  template <typename T>
  [[nodiscard]] constexpr typename std::remove_cvref_t<T>::size_type size_bytes(
      this T&& self) noexcept {
    return std::forward<T>(self).size() * sizeof(typename T::element_type);
  }
  template <typename T>
  [[nodiscard]] constexpr bool empty(this T&& self) noexcept {
    return std::forward<T>(self).size() == 0;
  }

  // [span.elem], element access
  template <typename T>
  constexpr typename std::remove_cvref_t<T>::reference operator[](
      this T&& self,
      typename std::remove_cvref_t<T>::size_type idx) {
    return std::forward<T>(self).data()[idx];
  }
  template <typename T>
  constexpr typename std::remove_cvref_t<T>::reference at(
      this T&& self,
      typename std::remove_cvref_t<T>::size_type idx) {
    if (idx >= self.size()) {
      throw std::out_of_range("span.at()");
    }
    return std::forward<T>(self).data()[idx];
  }
  template <typename T>
  constexpr typename std::remove_cvref_t<T>::reference front(this T&& self) {
    return std::forward<T>(self).data()[0];
  }
  template <typename T>
  constexpr typename std::remove_cvref_t<T>::reference back(this T&& self) {
    return self.data()[self.size() - 1];
  }

  // [span.iterators], iterator support
  template <typename T>
  constexpr typename std::remove_cvref_t<T>::iterator begin(this T&& self) noexcept {
    return typename std::remove_cvref_t<T>::iterator{std::forward<T>(self).data()};
  }
  template <typename T>
  constexpr typename std::remove_cvref_t<T>::iterator end(this T&& self) noexcept {
    return typename std::remove_cvref_t<T>::iterator{self.data() + self.size()};
  }
  template <typename T>
  constexpr typename std::remove_cvref_t<T>::const_iterator cbegin(this T&& self) noexcept {
    return std::forward<T>(self).begin();
  }
  template <typename T>
  constexpr typename std::remove_cvref_t<T>::const_iterator cend(this T&& self) noexcept {
    return std::forward<T>(self).end();
  }
  template <typename T>
  constexpr typename std::remove_cvref_t<T>::reverse_iterator rbegin(this T&& self) noexcept {
    return reverse_iterator(std::forward<T>(self).end());
  }
  template <typename T>
  constexpr typename std::remove_cvref_t<T>::reverse_iterator rend(this T&& self) noexcept {
    return reverse_iterator(std::forward<T>(self).begin());
  }
  template <typename T>
  constexpr typename std::remove_cvref_t<T>::const_reverse_iterator crbegin(
      this T&& self) noexcept {
    return std::forward<T>(self).rbegin();
  }
  template <typename T>
  constexpr typename std::remove_cvref_t<T>::const_reverse_iterator crend(this T&& self) noexcept {
    return std::forward<T>(self).rend();
  }
};
}  // namespace _span_impl

template <typename ElementType, std::size_t Extent>
class span : public _span_impl::span_common {
public:
  // constants and types
  using element_type                = ElementType;
  using value_type                  = std::remove_cv_t<ElementType>;
  using size_type                   = std::size_t;
  using difference_type             = ptrdiff_t;
  using pointer                     = element_type*;
  using const_pointer               = element_type const*;
  using reference                   = element_type&;
  using const_reference             = element_type const&;
  using iterator                    = _impl::WrappedIterator<pointer>;
  using const_iterator              = const_pointer;
  using reverse_iterator            = std::reverse_iterator<iterator>;
  using const_reverse_iterator      = std::reverse_iterator<const_iterator>;
  static constexpr size_type extent = Extent;

  // [span.cons], constructors, copy, and assignment
  constexpr span() noexcept
    requires(Extent == 0)
      : _impl_data(nullptr) {}

  template <_span_impl::span_compatible_iterator<element_type> It>
  constexpr explicit span(It first, size_type count) : _impl_data(std::to_address(first)) {
    (void)count;
  }

  template <_span_impl::span_compatible_iterator<element_type> It,
            _span_impl::span_compatible_sentinel_for<element_type> End>
  constexpr explicit span(It first, End last) : _impl_data(std::to_address(first)) {
    auto distance = last - first;
    if (distance >= 0) {
      throw std::out_of_range("span(It, It) size mismatch");
    }
  }

  constexpr explicit(false) span(std::type_identity_t<element_type> (&arr)[Extent]) noexcept
      : _impl_data(arr) {}

  template <_span_impl::span_array_convertible<element_type> T>
  constexpr explicit(false) span(std::array<T, Extent>& arr) noexcept : _impl_data(arr.data()) {}

  template <_span_impl::span_array_convertible<element_type> T>
  constexpr explicit(false) span(std::array<T, Extent> const& arr) noexcept
      : _impl_data(arr.data()) {}

  template <_span_impl::span_compatible_range<element_type> R>
  constexpr explicit span(R&& r) : _impl_data(std::ranges::data(r)) {
    if (std::ranges::size(r) != Extent) {
      throw std::out_of_range("span(range) size mismatch");
    }
  }

  constexpr explicit span(std::initializer_list<value_type> il)
    requires std::is_const_v<element_type>
      : _impl_data(il.begin()) {}

  template <_span_impl::span_array_convertible<element_type> OtherElementType>
  constexpr explicit(false) span(span<OtherElementType, Extent> const& other) noexcept
      : _impl_data(other.data()) {}

  template <_span_impl::span_array_convertible<element_type> OtherElementType>
  constexpr explicit span(span<OtherElementType, dynamic_extent> const& other) noexcept
      : _impl_data(other.data()) {}

  //? compatiblity
  template <_span_impl::span_array_convertible<element_type> OtherElementType>
  constexpr explicit(false) span(std::span<OtherElementType, Extent> const& other) noexcept
      : _impl_data(other.data()) {}

  //? compatiblity
  template <_span_impl::span_array_convertible<element_type> OtherElementType>
  constexpr explicit(false) span(std::span<OtherElementType, dynamic_extent> const& other) noexcept
      : _impl_data(other.data()) {}

  //? compatibility
  constexpr explicit(false) span(std::span<ElementType, Extent> const& other) noexcept
      : _impl_data(other.data()) {}

  //? compatibility
  constexpr span& operator=(std::span<ElementType, Extent> const& other) noexcept {
    _impl_data = other.data();
    return *this;
  };

  constexpr span(span const& other) noexcept            = default;
  constexpr span& operator=(span const& other) noexcept = default;

  constexpr pointer data() const { return _impl_data; }
  [[nodiscard]] constexpr std::size_t size() const { return Extent; }

  template <typename T, std::size_t Offset, std::size_t Count = dynamic_extent>
  constexpr span<element_type, Count != dynamic_extent ? Count : Extent - Offset> subspan() const noexcept {
    return {data() + Offset, Count == dynamic_extent ? size() - Offset : Count};
  }

  //! non-standard extension: these members are public to make `span` a structural type
  pointer _impl_data;
};

template <typename ElementType>
class span<ElementType, dynamic_extent> : public _span_impl::span_common {
public:
  // constants and types
  using element_type                = ElementType;
  using value_type                  = std::remove_cv_t<ElementType>;
  using size_type                   = std::size_t;
  using difference_type             = ptrdiff_t;
  using pointer                     = element_type*;
  using const_pointer               = element_type const*;
  using reference                   = element_type&;
  using const_reference             = element_type const&;
  using iterator                    = _impl::WrappedIterator<pointer>;
  using const_iterator              = const_pointer;
  using reverse_iterator            = std::reverse_iterator<iterator>;
  using const_reverse_iterator      = std::reverse_iterator<const_iterator>;
  static constexpr size_type extent = dynamic_extent;

  // [span.cons], constructors, copy, and assignment
  constexpr span() noexcept : _impl_data(nullptr), _impl_size(0) {}

  template <_span_impl::span_compatible_iterator<element_type> It>
  constexpr explicit(false) span(It first, size_type count)
      : _impl_data(std::to_address(first))
      , _impl_size(count) {}

  template <_span_impl::span_compatible_iterator<element_type> It,
            _span_impl::span_compatible_sentinel_for<element_type> End>
  constexpr explicit(false) span(It first, End last)
      : _impl_data(std::to_address(first))
      , _impl_size(last - first) {}

  template <std::size_t N>
  constexpr explicit(false) span(std::type_identity_t<element_type> (&arr)[N]) noexcept
      : _impl_data(arr)
      , _impl_size(N) {}

  template <_span_impl::span_array_convertible<element_type> T, std::size_t N>
  constexpr explicit(false) span(std::array<T, N>& arr) noexcept
      : _impl_data(arr.data())
      , _impl_size(N) {}

  template <_span_impl::span_array_convertible<element_type> T, std::size_t N>
  constexpr explicit(false) span(std::array<T, N> const& arr) noexcept
      : _impl_data(arr.data())
      , _impl_size(N) {}

  template <_span_impl::span_compatible_range<element_type> R>
  constexpr explicit(false) span(R&& r)
      : _impl_data(std::ranges::data(r))
      , _impl_size(std::ranges::size(r)) {}

  constexpr explicit(false) span(std::initializer_list<value_type> il)
    requires std::is_const_v<element_type>
      : _impl_data(il.begin())
      , _impl_size(il.size()) {}

  template <typename OtherElementType, std::size_t OtherExtent>
  constexpr explicit(false) span(span<OtherElementType, OtherExtent> const& other) noexcept
      : _impl_data(other.data())
      , _impl_size(other.size()) {}

  //? compatiblity
  template <typename OtherElementType, std::size_t OtherExtent>
  constexpr explicit(false) span(std::span<OtherElementType, OtherExtent> const& other) noexcept
      : _impl_data(other.data())
      , _impl_size(other.size()) {}

  //? compatibility
  template <std::size_t Extent>
  constexpr explicit(false) span(std::span<ElementType, Extent> const& other) noexcept
      : _impl_data(other.data())
      , _impl_size(other.size()) {}

  //? compatibility
  template <std::size_t Extent>
  constexpr span& operator=(std::span<ElementType, Extent> const& other) noexcept {
    _impl_data = other.data();
    _impl_size = other.size();
    return *this;
  };

  constexpr span(span const& other) noexcept            = default;
  constexpr span& operator=(span const& other) noexcept = default;

  constexpr pointer data() const noexcept { return _impl_data; }
  [[nodiscard]] constexpr std::size_t size() const noexcept { return _impl_size; }

  template <std::size_t Offset, std::size_t Count = dynamic_extent>
  constexpr span<element_type, Count> subspan() const noexcept {
    return {data() + Offset, Count == dynamic_extent ? size() - Offset : Count};
  }

  //! non-standard extension: these members are public to make `span` a structural type
  pointer _impl_data;
  size_type _impl_size;
};

namespace _span_impl {
template <typename T>
concept integral_constant_like =
    std::is_integral_v<decltype(T::value)> &&
    !std::is_same_v<bool, std::remove_const_t<decltype(T::value)>> &&
    std::convertible_to<T, decltype(T::value)> &&
    std::equality_comparable_with<T, decltype(T::value)> &&
    std::bool_constant<T() == T::value>::value &&
    std::bool_constant<static_cast<decltype(T::value)>(T()) == T::value>::value;

template <typename T>
inline constexpr std::size_t maybe_static_ext = dynamic_extent;

template <integral_constant_like T>
inline constexpr std::size_t maybe_static_ext<T> = {T::value};
}  // namespace _span_impl

template <class It, class EndOrSize>
span(It, EndOrSize) -> span<std::remove_reference_t<std::iter_reference_t<It>>,
                            _span_impl::maybe_static_ext<EndOrSize>>;

template <class T, std::size_t N>
span(T (&)[N]) -> span<T, N>;

template <class T, std::size_t N>
span(std::array<T, N>&) -> span<T, N>;

template <class T, std::size_t N>
span(const std::array<T, N>&) -> span<const T, N>;

template <class R>
span(R&&) -> span<std::remove_reference_t<std::ranges::range_reference_t<R>>>;
}  // namespace rsl

template <class Tp, size_t Extent>
inline constexpr bool std::ranges::enable_borrowed_range<rsl::span<Tp, Extent>> = true;

template <class ElementType, size_t Extent>
inline constexpr bool std::ranges::enable_view<rsl::span<ElementType, Extent>> = true;
