#pragma once
#include <rsl/serialize>
#include <string>

#include <meta>

#include <rsl/constant_wrapper>
#include <rsl/serializer/repr/serializer.hpp>
#include <rsl/serializer/name.hpp>

namespace rsl {
using _serialize_impl::NameMode;
using _serialize_impl::preferred_name;

using _serialize_impl::type_name;
using _serialize_impl::unqualified_name;
using _serialize_impl::qualified_name;
using _serialize_impl::fully_qualified_name;
using _serialize_impl::name_of;
using _serialize_impl::unqualified_name_of;
using _serialize_impl::qualified_name_of;
using _serialize_impl::fully_qualified_name_of;


using repr_options = serializer::_repr_impl::Options;

template <typename T>
constexpr std::string repr(T&& value, repr_options opts = {}) {
  auto visitor = rsl::serializer::_repr_impl::Serializer{opts};
  visitor(serializer::Meta<std::remove_cvref_t<T>>(), std::forward<T>(value));
  return visitor.finalize();
}

template <auto V>
constexpr std::string repr(rsl::constant_wrapper<V>, repr_options opts = {}) {
  return rsl::repr(V, opts);
}

template <typename T, repr_options Opts>
constexpr std::string repr(T&& value, rsl::constant_wrapper<Opts> = {}) {
  return rsl::repr(std::forward<T>(value), Opts);
}

template <auto V, repr_options Opts>
constexpr std::string repr(rsl::constant_wrapper<V>, rsl::constant_wrapper<Opts> = {}) {
  return rsl::repr(V, Opts);
}

template <typename T>
std::ostream& operator<<(std::ostream& stream, std::string (*)(T&&, repr_options)) {
  return stream << std::string_view(define_static_string(display_string_of(remove_cvref(^^T))));
}

template <typename T, repr_options Opts>
std::ostream& operator<<(std::ostream& stream, std::string (*)(T&&, rsl::constant_wrapper<Opts>)) {
  return stream << std::string_view(define_static_string(display_string_of(remove_cvref(^^T))));
}

template <auto V>
std::ostream& operator<<(std::ostream& stream,
                         std::string (*fnc)(rsl::constant_wrapper<V>, repr_options)) {
  return stream << fnc(rsl::constant_wrapper<V>{}, {});
}

template <auto V, repr_options Opts>
std::ostream& operator<<(std::ostream& stream,
                         std::string (*fnc)(rsl::constant_wrapper<V>,
                                            rsl::constant_wrapper<Opts>)) {
  return stream << fnc(rsl::constant_wrapper<V>{}, {});
}
}  // namespace rsl

#ifdef RSL_GLOBAL_REPR
using rsl::repr;
#endif