#pragma once
#include <rsl/serialize>
#include <string>

#include <meta>
#include <rsl/serializer/repr/serializer.hpp>

namespace rsl {
template <auto V>
struct Constant{};

struct repr_tag{};

template <typename T>
constexpr std::string repr(T&& value, repr_tag={}){
  auto visitor = rsl::serializer::_repr_impl::Serializer{};
  serializer::Meta<std::remove_cvref_t<T>>{}.visit(visitor, std::forward<T>(value));
  return visitor.finalize();
}

template <auto V>
constexpr std::string repr(Constant<V>, repr_tag={}){
  return rsl::repr(V);
}

template <typename T>
std::ostream& operator<<(std::ostream& stream, std::string(*)(T&&, repr_tag)){
  return stream << std::string_view(define_static_string(display_string_of(remove_cvref(^^T))));
}

template <auto V>
std::ostream& operator<<(std::ostream& stream, std::string(*fnc)(Constant<V>, repr_tag)){
  return stream << fnc(Constant<V>{}, {});
}
}

#ifdef RSL_GLOBAL_REPR
using rsl::repr;
#endif