#include <compare>  // see [compare.syn]
#include <meta>
#include <array>
#include <utility>
#include <type_traits>
#include <memory>

#include <rsl/_impl/index_of.hpp>
#include <rsl/_impl/member_cache.hpp>
#include <rsl/util/to_string.hpp>

#ifndef RSL_STD_COMPAT
#  define RSL_STD_COMPAT 1
#endif

#if RSL_STD_COMPAT
#  include <tuple>
#endif

namespace rsl {
// [tuple.tuple], class template tuple
template <class... Types>
class tuple;

// ignore
namespace _tuple_impl {
#if RSL_STD_COMPAT
using ignore_type = decltype(std::ignore);
#else
struct ignore_type {  // exposition only
  constexpr ignore_type const& operator=(const auto&) const noexcept { return *this; }
};
#endif
}  // namespace _tuple_impl

inline constexpr _tuple_impl::ignore_type ignore;

// [tuple.helper], tuple helper classes
template <class T>
struct tuple_size;

template <class T>
struct tuple_size<const T> : tuple_size<T> {};

template <class... Types>
struct tuple_size<tuple<Types...>> : std::integral_constant<std::size_t, sizeof...(Types)> {};

template <class T>
constexpr std::size_t tuple_size_v = tuple_size<T>::value;

template <std::size_t I, class T>
struct tuple_element;

template <std::size_t I, class... Types>
struct tuple_element<I, tuple<Types...> const> {
  using type = Types...[I] const;
};

template <std::size_t I, class... Types>
struct tuple_element<I, tuple<Types...>> {
  using type = Types...[I];
};

template <std::size_t I, class T>
using tuple_element_t = typename tuple_element<I, T>::type;

namespace _tuple_impl {
// [tuple.like], concept tuple-like
// TODO ranges::subrange
template <class T>
concept tuple_like = has_template_arguments(remove_cvref(^^T)) &&
                     (template_of(remove_cvref(^^T)) == ^^std::array ||
                      template_of(remove_cvref(^^T)) == ^^std::complex ||
                      template_of(remove_cvref(^^T)) == ^^std::pair ||
                      template_of(remove_cvref(^^T)) == ^^tuple);  // exposition only

template <class T>
concept is_rsl_tuple =
    has_template_arguments(remove_cvref(^^T)) && template_of(remove_cvref(^^T)) == ^^tuple;

template <typename T>
void test_implicit_default_constructibility(T) {
  static_assert(false, "test_implicit_default_constructibility called in evaluated context");
}

template <typename T>
concept is_implicitly_default_constructible = std::is_default_constructible_v<T> && requires {
  test_implicit_default_constructibility<T const&>({});
};

#ifdef __clang__
template <typename T, std::size_t Idx>
struct SubscriptElement {
  constexpr decltype(auto) operator[](std::size_t idx) &
      __attribute__((enable_if(idx == Idx, "index mismatch"))) {
    return get<Idx>(static_cast<T&>(*this));
  }

  constexpr decltype(auto) operator[](std::size_t idx) const&
      __attribute__((enable_if(idx == Idx, "index mismatch"))) {
    return get<Idx>(static_cast<T const&>(*this));
  }

  constexpr decltype(auto) operator[](std::size_t idx) &&
      __attribute__((enable_if(idx == Idx, "index mismatch"))) {
    return get<Idx>(static_cast<T&&>(*this));
  }

  constexpr decltype(auto) operator[](std::size_t idx) const&&
      __attribute__((enable_if(idx == Idx, "index mismatch"))) {
    return get<Idx>(static_cast<T const&&>(*this));
  }
};

template <typename T, typename = std::make_index_sequence<tuple_size_v<T>>>
struct Subscript;

template <typename T, std::size_t... Idx>
struct Subscript<T, std::index_sequence<Idx...>> : SubscriptElement<T, Idx>... {
  using SubscriptElement<T, Idx>::operator[]...;

  static constexpr decltype(auto) operator[](std::size_t idx)
      __attribute__((enable_if(idx >= sizeof...(Idx), "index mismatch"))) {
    std::unreachable();
  }
};
#endif
}  // namespace _tuple_impl

template <class... Types>
class tuple
#ifdef __clang__
    : public _tuple_impl::Subscript<tuple<Types...>>
#endif
{
private:

template <typename... Us>
constexpr static bool enable_utypes_ctor = !std::same_as<tuple, Us...[0]> && (std::is_constructible_v<Types, Us> && ...); 

template<>
constexpr bool enable_utypes_ctor<> = false;

template <typename... Us>
constexpr static bool enable_utypes_tuple_ctor = true; // TODO

template <>
constexpr bool enable_utypes_tuple_ctor<> = false;

public:
  struct Storage;

  consteval { 
    std::size_t idx = 0;
    define_aggregate(^^Storage, {
      data_member_spec(^^Types, {.name="_rsl_elt" + util::to_string(idx++)})...}); 
  };

  Storage _impl_storage;
  static constexpr auto _impl_accessor = [:_impl::cache_members(nonstatic_data_members_of(
                                               ^^Storage,
                                               std::meta::access_context::unchecked())):];

  // template <typename... UTypes>
  // static constexpr auto _impl_disambiguation_constraint =
  //     (sizeof...(Types) == 1 && !std::same_as<std::remove_cvref_t<rsl::tuple_element_t<0, rsl::tuple<UTypes...>>>, tuple>) ||
  //     ((sizeof...(Types) == 2 || sizeof...(Types) == 3) &&
  //      (!std::same_as<std::remove_cvref_t<rsl::tuple_element_t<0, rsl::tuple<UTypes...>>>, std::allocator_arg_t> ||
  //       std::same_as<std::remove_cvref_t<rsl::tuple_element_t<0, rsl::tuple<Types...>>>, std::allocator_arg_t>)) ||
  //     sizeof...(Types) >= 1;

  // [tuple.cnstr], tuple construction
  constexpr explicit((!_tuple_impl::is_implicitly_default_constructible<Types> || ...))
      tuple() noexcept(std::is_nothrow_default_constructible_v<Storage>)
    requires(std::is_default_constructible_v<Storage>)
  = default;

  constexpr explicit(!(std::is_convertible_v<Types const&, Types> && ...))
      tuple(Types const&... values) noexcept((std::is_nothrow_copy_constructible_v<Types> && ...))
    requires(sizeof...(Types) >= 1 && (std::is_copy_constructible_v<Types> && ...))
      : _impl_storage{values...} {}

  template <class... UTypes>
    requires(sizeof...(UTypes) == sizeof...(Types) &&
             !(std::reference_constructs_from_temporary_v<Types, UTypes &&> ||
               ...) &&  // TODO required?
             enable_utypes_ctor<UTypes...> &&
             (std::is_constructible_v<Types, UTypes> && ...))
  constexpr explicit(!(std::is_convertible_v<UTypes, Types> && ...)) tuple(UTypes&&... values)
      : _impl_storage(std::forward<UTypes>(values)...) {}

  template <class... UTypes>
    requires(sizeof...(UTypes) == sizeof...(Types) &&
             (std::reference_constructs_from_temporary_v<Types, UTypes &&> || ...))
  constexpr tuple(UTypes&&... values) = delete;

  tuple(tuple const&) noexcept(std::is_nothrow_copy_constructible_v<Storage>)
    requires(std::is_copy_constructible_v<Storage>)
  = default;

  tuple(tuple&&) noexcept(std::is_nothrow_move_constructible_v<Storage>)
    requires(std::is_move_constructible_v<Storage>)
  = default;

    template <class... UTypes>
    constexpr explicit(!(std::is_convertible_v<UTypes&, Types> && ...)) 
    tuple(tuple<UTypes...>& other)
    noexcept((std::is_nothrow_constructible_v<Types, UTypes&> && ...))
    requires(false) // TODO
    : _impl_storage(other) {}
    
    template <class... UTypes>
    constexpr explicit(!(std::is_convertible_v<UTypes const&, Types> && ...)) 
    tuple(tuple<UTypes...> const& other)
    noexcept((std::is_nothrow_constructible_v<Types, UTypes const&> && ...))
    requires(false) // TODO
    : _impl_storage(other) {}

    template <class... UTypes>
    constexpr explicit(!(std::is_convertible_v<UTypes, Types> && ...)) 
    tuple(tuple<UTypes...>&& other)
    noexcept((std::is_nothrow_constructible_v<Types, UTypes> && ...))
    requires(false) // TODO
    : _impl_storage(std::move(other)) {}
    
    template <class... UTypes>
    constexpr explicit(!(std::is_convertible_v<UTypes, Types> && ...)) 
    tuple(tuple<UTypes...> const&& other)
    requires(false) // TODO
    : _impl_storage(std::move(other)) {}

  //   template <class U1, class U2>
  //   constexpr explicit(true /* TODO*/) tuple(std::pair<U1, U2>&);  // only if
  //   sizeof...(Types) == 2 template <class U1, class U2> constexpr explicit(true /* TODO*/)
  //       tuple(const std::pair<U1, U2>&);  // only if sizeof...(Types) == 2
  //   template <class U1, class U2>
  //   constexpr explicit(true /* TODO*/) tuple(std::pair<U1, U2>&&);  // only if
  //   sizeof...(Types)
  //   == 2 template <class U1, class U2> constexpr explicit(true /* TODO*/)
  //       tuple(const std::pair<U1, U2>&&);  // only if sizeof...(Types) == 2

  //   template <tuple_like UTuple>
  //   constexpr explicit(true /* TODO*/) tuple(UTuple&&);

  //   // allocator-extended constructors
  //   template <class Alloc>
  //   constexpr explicit(true /* TODO*/) tuple(std::allocator_arg_t, const Alloc& a);
  //   template <class Alloc>
  //   constexpr explicit(true /* TODO*/) tuple(std::allocator_arg_t, const Alloc& a, const
  //   Types&...); template <class Alloc, class... UTypes> constexpr explicit(true /* TODO*/)
  //   tuple(std::allocator_arg_t, const Alloc& a, UTypes&&...); template <class Alloc>
  //   constexpr tuple(std::allocator_arg_t, const Alloc& a, const tuple&); template <class
  //   Alloc> constexpr tuple(std::allocator_arg_t, const Alloc& a, tuple&&); template <class
  //   Alloc, class... UTypes> constexpr explicit(true /* TODO*/) tuple(std::allocator_arg_t,
  //   const Alloc& a, tuple<UTypes...>&); template <class Alloc, class... UTypes> constexpr
  //   explicit(true /*
  //   TODO*/)
  //       tuple(std::allocator_arg_t, const Alloc& a, const tuple<UTypes...>&);
  //   template <class Alloc, class... UTypes>
  //   constexpr explicit(true /* TODO*/)
  //       tuple(std::allocator_arg_t, const Alloc& a, tuple<UTypes...>&&);
  //   template <class Alloc, class... UTypes>
  //   constexpr explicit(true /* TODO*/)
  //       tuple(std::allocator_arg_t, const Alloc& a, const tuple<UTypes...>&&);
  //   template <class Alloc, class U1, class U2>
  //   constexpr explicit(true /* TODO*/)
  //       tuple(std::allocator_arg_t, const Alloc& a, std::pair<U1, U2>&);
  //   template <class Alloc, class U1, class U2>
  //   constexpr explicit(true /* TODO*/)
  //       tuple(std::allocator_arg_t, const Alloc& a, const std::pair<U1, U2>&);
  //   template <class Alloc, class U1, class U2>
  //   constexpr explicit(true /* TODO*/)
  //       tuple(std::allocator_arg_t, const Alloc& a, std::pair<U1, U2>&&);
  //   template <class Alloc, class U1, class U2>
  //   constexpr explicit(true /* TODO*/)
  //       tuple(std::allocator_arg_t, const Alloc& a, const std::pair<U1, U2>&&);

  //   template <class Alloc, tuple_like UTuple>
  //   constexpr explicit(true /* TODO*/) tuple(std::allocator_arg_t, const Alloc& a, UTuple&&);

  //! non-standard: get member function
  template <std::size_t I, class Self>
  constexpr decltype(auto) get(this Self&& self) {
    return _impl_accessor.template get<I>(std::forward<Self>(self)._impl_storage);
  }

  template <typename T, class Self>
  constexpr decltype(auto) get(this Self&& self) {
    return _impl_accessor.template get<_impl::index_of<T, _impl::TypeList<Types...>>>(
        std::forward<Self>(self)._impl_storage);
  }

  // [tuple.assign], tuple assignment
  //   constexpr tuple& operator=(const tuple&);
  //   constexpr const tuple& operator=(const tuple&) const;
  //   constexpr tuple& operator=(tuple&&) noexcept(true /* TODO */);
  //   constexpr const tuple& operator=(tuple&&) const;

  //   template <class... UTypes>
  //   constexpr tuple& operator=(const tuple<UTypes...>&);
  //   template <class... UTypes>
  //   constexpr const tuple& operator=(const tuple<UTypes...>&) const;
  //   template <class... UTypes>
  //   constexpr tuple& operator=(tuple<UTypes...>&&);
  //   template <class... UTypes>
  //   constexpr const tuple& operator=(tuple<UTypes...>&&) const;

  //   template <class U1, class U2>
  //   constexpr tuple& operator=(const std::pair<U1, U2>&);  // only if sizeof...(Types) == 2
  //   template <class U1, class U2>
  //   constexpr const tuple& operator=(const std::pair<U1, U2>&) const;
  // //   only if sizeof...(Types) == 2
  //   template <class U1, class U2>
  //   constexpr tuple& operator=(std::pair<U1, U2>&&);  // only if sizeof...(Types) == 2
  //   template <class U1, class U2>
  //   constexpr const tuple& operator=(std::pair<U1, U2>&&) const;  // only if sizeof...(Types) ==
  //   2

  //   template <tuple_like UTuple>
  //   constexpr tuple& operator=(UTuple&&);
  //   template <tuple_like UTuple>
  //   constexpr const tuple& operator=(UTuple&&) const;

  // [tuple.swap], tuple swap
  //   constexpr void swap(tuple&) noexcept(true /* TODO */);
  //   constexpr void swap(const tuple&) const noexcept(true /* TODO */);
};

template <class... UTypes>
tuple(UTypes...) -> tuple<UTypes...>;
template <class T1, class T2>
tuple(std::pair<T1, T2>) -> tuple<T1, T2>;
template <class Alloc, class... UTypes>
tuple(std::allocator_arg_t, Alloc, UTypes...) -> tuple<UTypes...>;
template <class Alloc, class T1, class T2>
tuple(std::allocator_arg_t, Alloc, std::pair<T1, T2>) -> tuple<T1, T2>;
template <class Alloc, class... UTypes>
tuple(std::allocator_arg_t, Alloc, tuple<UTypes...>) -> tuple<UTypes...>;

// [tuple.creation], tuple creation functions
template <class... TTypes>
constexpr tuple<std::unwrap_ref_decay_t<TTypes>...> make_tuple(TTypes&&... values) {
  return {std::forward<TTypes>(values)...};
}

template <class... TTypes>
constexpr tuple<TTypes&&...> forward_as_tuple(TTypes&&... values) noexcept {
  return {std::forward<TTypes&&>(values)...};
}

template <class... TTypes>
constexpr tuple<TTypes&...> tie(TTypes&... values) noexcept {
  return {values...};
}

//! non-standard extension
template <_tuple_impl::is_rsl_tuple R, _tuple_impl::is_rsl_tuple L>
constexpr auto operator+(R&& rhs, L&& lhs) {
  auto&& [... rhs_members] = rhs;
  auto&& [... lhs_members] = lhs;
  return tuple<std::remove_cvref_t<decltype(rhs_members)>...,
               std::remove_cvref_t<decltype(lhs_members)>...>(std::forward_like<R>(rhs_members)...,
                                                              std::forward_like<L>(lhs_members)...);
}

template <_tuple_impl::is_rsl_tuple... Tuples>
constexpr auto tuple_cat(Tuples&&... tuples) {
  if constexpr (sizeof...(Tuples) == 0) {
    return std::tuple<>();
  } else {
    return (std::forward<Tuples>(tuples) + ...);
  }
}

// [tuple.apply], calling a function with a tuple of arguments
namespace _tuple_impl {
template <class F, _tuple_impl::tuple_like Tuple>
consteval bool is_nothrow_apply(F&& f, Tuple&& t) {
  auto&& [... args] = t;
  return noexcept(std::invoke(std::forward<F>(f), std::forward_like<Tuple>(args)...));
}
}  // namespace _tuple_impl

template <class F, _tuple_impl::tuple_like Tuple>
constexpr decltype(auto) apply(F&& f, Tuple&& t) noexcept(
    _tuple_impl::is_nothrow_apply(std::forward<F>(f), std::forward<Tuple>(t))) {
  auto&& [... args] = t;
  return std::invoke(std::forward<F>(f), std::forward_like<Tuple>(args)...);
}

template <class T, _tuple_impl::tuple_like Tuple>
constexpr T make_from_tuple(Tuple&& t) {
  auto&& [... members] = t;
  return {std::forward_like<Tuple>(members)...};
}

// [tuple.elem], element access
template <std::size_t I, _tuple_impl::is_rsl_tuple T>
constexpr decltype(auto) get(T&& obj) noexcept {
  return std::forward<T>(obj).template get<I>();
}

template <typename T, _tuple_impl::is_rsl_tuple U>
constexpr decltype(auto) get(U&& obj) noexcept {
  return std::forward<U>(obj).template get<T>();
}

// [tuple.rel], relational operators
template <class... TTypes, class... UTypes>
constexpr bool operator==(tuple<TTypes...> const& rhs, tuple<UTypes...> const& lhs) {
  static_assert(sizeof...(TTypes) == sizeof...(UTypes), "Cannot compare tuples of unequal size");
  if constexpr (sizeof...(TTypes) == 0) {
    return true;
  } else {
    auto const& [... rhs_elts] = rhs;
    auto const& [... lhs_elts] = lhs;
    return (... && (rhs_elts == lhs_elts));
  }
}

// template <class... TTypes, tuple_like UTuple>
// constexpr bool operator==(const tuple<TTypes...>&, const UTuple&);

// template <class... TTypes, class... UTypes>
// constexpr std::common_comparison_category_t<synth_three_way_result<TTypes, UTypes>...>
// operator<=>(
//     const tuple<TTypes...>&,
//     const tuple<UTypes...>&);
// template <class... TTypes, tuple_like UTuple>
// constexpr std::common_comparison_category_t<synth_three_way_result<TTypes, Elems>...>
// operator<=>(
//     const tuple<TTypes...>&,
//     const UTuple&);

// [tuple.special], specialized algorithms
// template <class... Types>
// constexpr void swap(tuple<Types...>& x, tuple<Types...>& y) noexcept(true /* TODO */);
// template <class... Types>
// constexpr void swap(const tuple<Types...>& x, const tuple<Types...>& y) noexcept(true /* TODO
// */);

}  // namespace rsl

// [tuple.common.ref], common_reference related specializations
// template <rsl::tuple_like TTuple,
//           rsl::tuple_like UTuple,
//           template <class> class TQual,
//           template <class> class UQual>
// struct std::basic_common_reference<TTuple, UTuple, TQual, UQual>;
// template <rsl::tuple_like TTuple, rsl::tuple_like UTuple>
// struct std::common_type<TTuple, UTuple>;

// [tuple.traits], allocator-related traits
// template <class... Types, class Alloc>
// struct std::uses_allocator<rsl::tuple<Types...>, Alloc>;

#if RSL_STD_COMPAT
template <class T>
  requires requires { typename rsl::tuple_size<T>; }
struct std::tuple_size<T> : rsl::tuple_size<T> {};

template <std::size_t I, class T>
  requires requires { typename rsl::tuple_element<I, T>; }
struct std::tuple_element<I, T> : rsl::tuple_element<I, T> {};

#endif