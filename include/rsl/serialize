#pragma once
#include <functional>
#include <ranges>
#include <rsl/meta_traits>

#include "serializer/machinery.hpp"

namespace rsl {
template <typename T, typename V>
constexpr void serialize(T&& serializer, V&& data) {
  std::invoke(serializer, serializer::Meta<std::remove_cvref_t<V>>{}, std::forward<V>(data));
}

template <meta::complete_type V, typename T, std::ranges::forward_range R>
constexpr V deserialize(T&& deserializer, R&& data) {}

template <typename T, meta::complete_type V>
constexpr void serialize_type(T&& serializer) {
  return serializer.template operator()<^^V>();
}

template <typename T, std::ranges::forward_range R>
consteval std::meta::info deserialize_type(T&& deserializer, R&& data) {
  return deserializer(data);
}

}  // namespace rsl